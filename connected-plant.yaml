esphome:
  name: connected-plant
  friendly_name: Connected Plant

esp32:
  board: az-delivery-devkit-v4
  framework:
    type: arduino

logger:

api:
  encryption:
    key: "(API ENCRYPTION KEY GENERATED BY ESPHOME)"

ota:
  password: "(OTA PASSWORD GENERATED BY ESPHOME)"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:
    
switch:
  - platform: template
    optimistic: true
    id: manual_switch
    name: "Manual Switch"
    on_turn_on:
      then:
        - binary_sensor.template.publish:
            id: knocked
            state: ON
        - light.turn_on:
            id: lighting
            effect: "Moisture Level Indicator"
            brightness: 100%
    on_turn_off:
      then:
        - binary_sensor.template.publish:
            id: knocked
            state: OFF
        - light.turn_off: lighting

sensor:
  # Soil Moisture - Capacitive Soil Moisture Sensor v1.2
  - platform: adc
    pin: 32
    update_interval: 1s
    id: moisture_internal
    internal: true
    attenuation: auto
    unit_of_measurement: "%"
    filters:
    - calibrate_linear:
        - 2.3 -> 0.00
        - 1.0 -> 100.00
    - lambda: |-
        if (x < 1) return 0; else if (x > 100) return 100; else return (x);
    accuracy_decimals: 0

  # This is the moisture exposed to Home Assistant (less frequently than the internal sensor)
  - platform: template
    name: "Moisture"
    id: moisture
    unit_of_measurement: "%"
    update_interval: 60s
    icon: "mdi:water"
    lambda: |-
      return id(moisture_internal).state;

binary_sensor:
  # Variable for Home Assistant
  - platform: template
    name: "Knocked"
    id: knocked
    icon: "mdi:vibrate"
  # Vibration - KY-002n Shock Sensor Module
  - platform: gpio
    pin:
      number: 25
      mode: INPUT_PULLUP
    name: "Vibration"
    internal: true
    on_press:
      then:
        - binary_sensor.template.publish:
            id: knocked
            state: ON
        - light.turn_on:
            id: lighting
            effect: "Moisture Level Indicator"
            brightness: 100%
        - delay: 60s
        - binary_sensor.template.publish:
            id: knocked
            state: OFF
        - light.turn_off: lighting

light:
  # Lighting - WS2812B LED strip
  - platform: fastled_clockless
    chipset: WS2812
    pin: 27
    num_leds: 77
    rgb_order: GRB
    name: "Lighting"
    id: lighting
    icon: "mdi:led-strip-variant"
    effects:
      - addressable_lambda:
          name: Moisture Level Indicator
          update_interval: 1s
          # blue = map(val, 0, 70, 255, 0); // deeper blue for lower values
          lambda: |-
            auto val = id(moisture_internal).state;
            id(moisture).publish_state(val);         // Publish the state every 1s to HA while the effect is playing
            if (val >= 0 && val < 10) {
              it.all() = ESPColor(255, 0, 0);
            } else if (val >= 10 && val < 20) {
              it.all() = ESPColor(230, 25, 0);
            } else if (val >= 20 && val < 30) {
              it.all() = ESPColor(204, 51, 0);
            } else if (val >= 30 && val < 40) {
              it.all() = ESPColor(179, 77, 0);
            } else if (val >= 40 && val < 50) {
              it.all() = ESPColor(153, 102, 0);
            } else if (val >= 50 && val < 60) {
              it.all() = ESPColor(128, 128, 0);
            } else if (val >= 60 && val < 70) {
              it.all() = ESPColor(102, 153, 0);
            } else if (val >= 70 && val < 80) {
              it.all() = ESPColor(77, 179, 0);
            } else if (val >= 80 && val < 90) {
              it.all() = ESPColor(51, 204, 0);
            } else if (val >= 90 && val <= 100) {
              it.all() = ESPColor(0, 255, 0);
            }

